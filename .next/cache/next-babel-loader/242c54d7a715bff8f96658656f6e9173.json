{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\nimport FeedbackComponent from './Feedback';\n\nconst Entities = require('html-entities').AllHtmlEntities;\n\nimport { styles } from '../../stylesheet';\nconst entities = new Entities();\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  } // calls function to fetch the questions before the component mounts\n\n\n  componentWillMount() {\n    this.onGetQuestions();\n  } // fetch quesions from cocktail trivia\n\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category; //fetch questions\n\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg);\n    const allData = await response.json();\n    this.setState({\n      questionsArr: allData\n    });\n  } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n    this.setState({\n      lastQuestionCorrect: isCorrect\n    });\n    this.setState({\n      lastQuestionAnswer: correctAnswer\n    });\n    this.setState({\n      showFeedback: true\n    });\n    setTimeout(() => {\n      this.setState({\n        showFeedback: false\n      });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n    this.setState({\n      currentScore: score\n    });\n    this.setState({\n      questionIndex: nextQIndex\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: styles.root\n    }, __jsx(Backdrop, {\n      open: this.state.showFeedback\n    }, __jsx(FeedbackComponent, {\n      wasCorrect: this.state.lastQuestionCorrect,\n      correctAnswer: this.state.lastQuestionAnswer\n    })), __jsx(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\"\n    }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n      style: styles.questionText\n    }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \"   \"), __jsx(AnswersComponent, {\n      answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n      callback: this.nextQuestion\n    })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n      score: this.state.currentScore,\n      callback: this.props.callback\n    }))));\n  }\n\n}\n\nexport default QuestionsComponent;","map":null,"metadata":{},"sourceType":"module"}