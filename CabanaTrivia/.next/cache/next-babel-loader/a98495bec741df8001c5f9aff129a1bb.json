{"ast":null,"code":"var _jsxFileName = \"/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './components/DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport StartComponent from './components/Start';\nimport QuestionsComponent from './components/Questions';\nimport CategoriesComponent from './components/Categories';\nimport DifficultyComponent from './components/Difficulty';\nconst styles = {};\nexport default class IndexPage extends Component {\n  constructor(props) {\n    super(props); // initialize the game state\n\n    this.state = {\n      gameState: \"START\",\n      catArray: [],\n      gameDifficulty: \"\"\n    };\n    this.renderSwitch = this.renderSwitch.bind(this);\n    this.backHome = this.backHome.bind(this);\n    this.fromDifficultyToQuestions = this.fromDifficultyToQuestions.bind(this);\n    this.fromCategoriestoDifficulty = this.fromCategoriestoDifficulty.bind(this);\n  }\n\n  fromCategoriestoDifficulty(nextActions, updatedArray) {\n    this.setState({\n      catArray: updatedArray\n    });\n    this.setState({\n      gameState: nextActions\n    });\n  }\n\n  fromDifficultyToQuestions(nextActions, difficulty) {\n    this.setState({\n      gameDifficulty: difficulty\n    });\n    this.setState({\n      gameState: nextActions\n    });\n  } // changes the state of the game to whatever is passed as \"nextActions\". Can be e.g. START or QUESTIONS\n\n\n  backHome(nextActions) {\n    this.setState({\n      gameState: nextActions\n    });\n  } // sets the number of questions\n\n\n  setNumQuestions(numQuestions) {\n    this.setState({\n      numQuestions: numQuestions\n    });\n  } // reder the desired componenent based on the state\n\n\n  renderSwitch(gameState) {\n    switch (gameState) {\n      case 'START':\n        return __jsx(StartComponent, {\n          callback: this.backHome,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 16\n          }\n        });\n\n      case 'CATEGORIES':\n        return __jsx(CategoriesComponent, {\n          callback: this.fromCategoriestoDifficulty,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 16\n          }\n        });\n\n      case 'QUESTIONS':\n        return __jsx(QuestionsComponent, {\n          callback: this.backHome,\n          cat: this.state.catArray,\n          diff: this.state.gameDifficulty,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 16\n          }\n        }, \" \");\n\n      case 'DIFFICULTY':\n        return __jsx(DifficultyComponent, {\n          callback: this.fromDifficultyToQuestions,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 16\n          }\n        });\n\n      default:\n        return __jsx(StartComponent, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 16\n          }\n        });\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, \" \", this.renderSwitch(this.state.gameState));\n  }\n\n}","map":{"version":3,"sources":["/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/index.js"],"names":["React","Component","Button","DangerButton","Grid","StartComponent","QuestionsComponent","CategoriesComponent","DifficultyComponent","styles","IndexPage","constructor","props","state","gameState","catArray","gameDifficulty","renderSwitch","bind","backHome","fromDifficultyToQuestions","fromCategoriestoDifficulty","nextActions","updatedArray","setState","difficulty","setNumQuestions","numQuestions","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './components/DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport StartComponent from './components/Start'\nimport QuestionsComponent from './components/Questions'\nimport CategoriesComponent from './components/Categories'\nimport DifficultyComponent from './components/Difficulty'\n\n\nconst styles = ({\n\n})\n\nexport default class IndexPage extends Component {\n\n  constructor(props) {\n    super(props)\n\n    // initialize the game state\n    this.state = {\n      gameState: \"START\",\n      catArray:[],\n      gameDifficulty: \"\",\n    };\n\n    this.renderSwitch = this.renderSwitch.bind(this)\n    this.backHome = this.backHome.bind(this)\n    this.fromDifficultyToQuestions = this.fromDifficultyToQuestions.bind(this)\n    this.fromCategoriestoDifficulty = this.fromCategoriestoDifficulty.bind(this)\n  }\n\n  fromCategoriestoDifficulty(nextActions, updatedArray){\n    this.setState({catArray: updatedArray})\n    this.setState({gameState: nextActions})\n  }\n\n  fromDifficultyToQuestions(nextActions, difficulty){\n    this.setState({gameDifficulty: difficulty})\n    this.setState({gameState: nextActions})\n  }\n\n\n  // changes the state of the game to whatever is passed as \"nextActions\". Can be e.g. START or QUESTIONS\n  backHome(nextActions) {\n    this.setState({gameState:nextActions})\n\n  }\n\n  // sets the number of questions\n  setNumQuestions(numQuestions) {\n    this.setState({numQuestions: numQuestions})\n  }\n\n  // reder the desired componenent based on the state\n  renderSwitch(gameState) {\n    switch (gameState) {\n      case 'START':\n        return <StartComponent callback={this.backHome}></StartComponent>\n      case 'CATEGORIES':\n        return <CategoriesComponent callback={this.fromCategoriestoDifficulty} ></CategoriesComponent>\n      case 'QUESTIONS':\n        return <QuestionsComponent callback={this.backHome} cat ={this.state.catArray} diff = {this.state.gameDifficulty} > </QuestionsComponent>\n      case 'DIFFICULTY':\n        return <DifficultyComponent callback={this.fromDifficultyToQuestions}></DifficultyComponent>\n      default:\n        return <StartComponent></StartComponent>\n    }\n  }\n\n\n\n  render() {\n    return <> {this.renderSwitch(this.state.gameState)}</>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}