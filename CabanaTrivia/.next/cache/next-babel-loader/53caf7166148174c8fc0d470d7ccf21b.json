{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport { CATEGORIES_MAP } from '../constants';\n\nvar Entities = require(\"html-entities\").AllHtmlEntities;\n\nvar entities = new Entities();\nvar MAX_NUM_QUESTIONS = 10;\nvar FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nvar QuestionsComponent = /*#__PURE__*/function (_Component) {\n  _inherits(QuestionsComponent, _Component);\n\n  var _super = _createSuper(QuestionsComponent);\n\n  function QuestionsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionsComponent);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    _this.nextQuestion = _this.nextQuestion.bind(_assertThisInitialized(_this));\n    _this.getUrls = _this.getUrls.bind(_assertThisInitialized(_this));\n    _this.parseQuestionAnswerFormat = _this.parseQuestionAnswerFormat.bind(_assertThisInitialized(_this));\n    _this.shuffleArray = _this.shuffleArray.bind(_assertThisInitialized(_this));\n    return _this;\n  } // calls function to fetch the questions before the component mounts\n\n\n  _createClass(QuestionsComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.onGetQuestions(this.props.cat);\n    }\n    /*\n    function: getUrls\n    Iterates over the user's selected categories (stored in this.props.cat)\n    Creates a custom URL for each category\n    Returns an array with all the URLS to fetch\n    */\n\n  }, {\n    key: \"getUrls\",\n    value: function getUrls(categories) {\n      var urls = [];\n      var customURL = \"\";\n      var numQs = MAX_NUM_QUESTIONS; // TODO: HOW MANY QUESTIONS SHOULD WE ASK? this or pass it into the function DUMMY FUNCTION\n\n      for (var i = 0; i < categories.length; i++) {\n        customURL = \"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[categories[i]] + \"&difficulty=\" + this.props.diff; //Add URL LINK to array\n\n        urls.push(customURL);\n      }\n\n      return urls;\n    } // fetch quesions from cocktail trivia\n\n  }, {\n    key: \"onGetQuestions\",\n    value: function onGetQuestions(category) {\n      var chosenCategories, allUrls, finalCateg, difficulty, numQs, json, allData, catQuestionsAndAnswers, fetchRequest, i;\n      return _regeneratorRuntime.async(function onGetQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              chosenCategories = this.props.cat;\n              allUrls = this.getUrls(chosenCategories);\n              finalCateg = category == null ? \"MUSIC\" : category; // pass in the array of categories.\n\n              difficulty = this.props.diff;\n              numQs = MAX_NUM_QUESTIONS; // change this or pass it into the function\n\n              allData = [];\n              i = 0;\n\n            case 7:\n              if (!(i < allUrls.length)) {\n                _context.next = 19;\n                break;\n              }\n\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(fetch(allUrls[i]));\n\n            case 10:\n              fetchRequest = _context.sent;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(fetchRequest.json());\n\n            case 13:\n              json = _context.sent;\n              catQuestionsAndAnswers = this.parseQuestionAnswerFormat(json.results);\n              allData = allData.concat(catQuestionsAndAnswers);\n\n            case 16:\n              i++;\n              _context.next = 7;\n              break;\n\n            case 19:\n              this.shuffleArray(allData);\n              allData.slice(0, MAX_NUM_QUESTIONS);\n              console.log(allData);\n              this.setState({\n                questionsArr: allData\n              });\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    } // shuffles the array of answers for randomness\n\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(a) {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    }\n    /*This function parses the result from the API to the same format that was used in the previous API*/\n\n  }, {\n    key: \"parseQuestionAnswerFormat\",\n    value: function parseQuestionAnswerFormat(arr) {\n      var finalArr = [];\n\n      var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          var questionObj = {};\n          questionObj.text = item.question;\n          var answers = [{\n            text: item.correct_answer,\n            correct: true\n          }];\n\n          var _iterator2 = _createForOfIteratorHelper(item.incorrect_answers),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var answerObj = _step2.value;\n              answers.push({\n                text: answerObj,\n                correct: false\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          this.shuffleArray(answers);\n          questionObj.answers = answers;\n          finalArr.push(questionObj);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return finalArr;\n    } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion(isCorrect, correctAnswer) {\n      var _this2 = this;\n\n      var score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n      var nextQIndex = this.state.questionIndex + 1;\n      this.setState({\n        lastQuestionCorrect: isCorrect\n      });\n      this.setState({\n        lastQuestionAnswer: correctAnswer\n      });\n      this.setState({\n        showFeedback: true\n      });\n      setTimeout(function () {\n        _this2.setState({\n          showFeedback: false\n        });\n      }, FEEDBACK_SHOW_TIME_SECS * 1000);\n      this.setState({\n        currentScore: score\n      });\n      this.setState({\n        questionIndex: nextQIndex\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        style: styles.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, __jsx(Backdrop, {\n        open: this.state.showFeedback,\n        style: styles.feedbackWrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, __jsx(FeedbackComponent, {\n        wasCorrect: this.state.lastQuestionCorrect,\n        correctAnswer: this.state.lastQuestionAnswer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      })), __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n        style: styles.questionText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \" \"), __jsx(AnswersComponent, {\n        answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n        callback: this.nextQuestion,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n        score: this.state.currentScore,\n        callback: this.props.callback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n\n  return QuestionsComponent;\n}(Component);\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["styles","React","Component","Grid","Backdrop","AnswersComponent","CategoriesComponent","GameOverComponent","FeedbackComponent","IndexPage","CATEGORIES_MAP","Entities","require","AllHtmlEntities","entities","MAX_NUM_QUESTIONS","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","nextQuestion","bind","getUrls","parseQuestionAnswerFormat","shuffleArray","onGetQuestions","cat","categories","urls","customURL","numQs","i","length","diff","push","category","chosenCategories","allUrls","finalCateg","difficulty","allData","fetch","fetchRequest","json","catQuestionsAndAnswers","results","concat","slice","console","log","setState","questionsArr","a","j","x","Math","floor","random","arr","finalArr","item","questionObj","text","question","answers","correct_answer","correct","incorrect_answers","answerObj","isCorrect","correctAnswer","score","nextQIndex","setTimeout","root","feedbackWrapper","questionText","decode","callback"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport {CATEGORIES_MAP} from '../constants'\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\nconst MAX_NUM_QUESTIONS = 10;\nconst FEEDBACK_SHOW_TIME_SECS = 2;\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getUrls = this.getUrls.bind(this);\n    this.parseQuestionAnswerFormat = this.parseQuestionAnswerFormat.bind(this)\n    this.shuffleArray = this.shuffleArray.bind(this)\n  }\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n      this.onGetQuestions(this.props.cat);\n  }\n\n  /*\n  function: getUrls\n  Iterates over the user's selected categories (stored in this.props.cat)\n  Creates a custom URL for each category\n  Returns an array with all the URLS to fetch\n  */\n  getUrls(categories){\n    var urls = []\n    var customURL = \"\"\n    const numQs = MAX_NUM_QUESTIONS  // TODO: HOW MANY QUESTIONS SHOULD WE ASK? this or pass it into the function DUMMY FUNCTION\n    for(var i = 0; i < categories.length; i ++) {\n      customURL = \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[categories[i]]+\"&difficulty=\"+this.props.diff\n      //Add URL LINK to array\n      urls.push(customURL)\n\n  }\n  return urls\n}\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    var chosenCategories = this.props.cat\n    const allUrls = this.getUrls(chosenCategories)\n    const finalCateg = category == null ? \"MUSIC\" : category;  // pass in the array of categories.\n    const difficulty = this.props.diff\n    const numQs = MAX_NUM_QUESTIONS  // change this or pass it into the function\n\n    let json\n    var allData = []\n    let catQuestionsAndAnswers\n    let fetchRequest\n\n    for(var i = 0; i < allUrls.length; i ++) {\n      fetchRequest = await fetch(allUrls[i])\n      json = await fetchRequest.json();\n      catQuestionsAndAnswers = this.parseQuestionAnswerFormat(json.results)\n      allData = allData.concat(catQuestionsAndAnswers)\n    }\n\n    this.shuffleArray(allData)\n    allData.slice(0, MAX_NUM_QUESTIONS)\n\n    console.log(allData)\n\n   this.setState({ questionsArr: allData });\n  }\n\n// shuffles the array of answers for randomness\n  shuffleArray(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n/*This function parses the result from the API to the same format that was used in the previous API*/\n  parseQuestionAnswerFormat(arr){\n    const finalArr = []\n    for (const item of arr){\n      const questionObj = {}\n      questionObj.text = item.question\n      const answers = [{ text: item.correct_answer, correct: true}]\n      for (const answerObj of item.incorrect_answers){\n        answers.push({text: answerObj, correct: false})\n      }\n      this.shuffleArray(answers)\n      questionObj.answers = answers\n      finalArr.push(questionObj)\n    }\n    return finalArr\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect\n      ? this.state.currentScore + 1\n      : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n\n    this.setState({ lastQuestionCorrect: isCorrect });\n    this.setState({ lastQuestionAnswer: correctAnswer });\n    this.setState({ showFeedback: true });\n    setTimeout(() => {\n      this.setState({ showFeedback: false });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n\n    this.setState({ currentScore: score });\n    this.setState({ questionIndex: nextQIndex });\n  }\n\n  render() {\n    return (\n      <div style={styles.root}>\n        <Backdrop open={this.state.showFeedback} style={styles.feedbackWrapper}>\n          <FeedbackComponent\n            wasCorrect={this.state.lastQuestionCorrect}\n            correctAnswer={this.state.lastQuestionAnswer}\n          />\n        </Backdrop>\n\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          {this.state.questionIndex < MAX_NUM_QUESTIONS && (\n            <>\n              <p style={styles.questionText}>\n                {this.state.questionsArr &&\n                  entities.decode(\n                    this.state.questionsArr[this.state.questionIndex].text\n                  )}{\" \"}\n              </p>\n              <AnswersComponent\n                answers={\n                  this.state.questionsArr &&\n                  this.state.questionsArr[this.state.questionIndex].answers\n                }\n                callback={this.nextQuestion}\n              ></AnswersComponent>\n            </>\n          )}\n\n          {this.state.questionIndex >= MAX_NUM_QUESTIONS && (\n            <>\n              <GameOverComponent\n                score={this.state.currentScore}\n                callback={this.props.callback}\n              ></GameOverComponent>\n            </>\n          )}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default QuestionsComponent;\n"]},"metadata":{},"sourceType":"module"}