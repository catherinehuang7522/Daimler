{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\nimport FeedbackComponent from './Feedback';\n\nvar Entities = require('html-entities').AllHtmlEntities;\n\nimport { styles } from '../stylesheet.js';\nvar entities = new Entities();\nvar FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nvar QuestionsComponent = /*#__PURE__*/function (_Component) {\n  _inherits(QuestionsComponent, _Component);\n\n  function QuestionsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionsComponent).call(this, props));\n    _this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    _this.nextQuestion = _this.nextQuestion.bind(_assertThisInitialized(_this));\n    return _this;\n  } // calls function to fetch the questions before the component mounts\n\n\n  _createClass(QuestionsComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.onGetQuestions();\n    } // fetch quesions from cocktail trivia\n\n  }, {\n    key: \"onGetQuestions\",\n    value: function onGetQuestions(category) {\n      var finalCateg, requestString, response, allData;\n      return _regeneratorRuntime.async(function onGetQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              finalCateg = category == null ? \"entertainment-music\" : category; //fetch questions\n\n              requestString = finalCateg + \"/count/\" + String(this.props.numQuestions);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + requestString));\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 7:\n              allData = _context.sent;\n              this.setState({\n                questionsArr: allData\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion(isCorrect, correctAnswer) {\n      var _this2 = this;\n\n      var score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n      var nextQIndex = this.state.questionIndex + 1;\n      this.setState({\n        lastQuestionCorrect: isCorrect\n      });\n      this.setState({\n        lastQuestionAnswer: correctAnswer\n      });\n      this.setState({\n        showFeedback: true\n      });\n      setTimeout(function () {\n        _this2.setState({\n          showFeedback: false\n        });\n      }, FEEDBACK_SHOW_TIME_SECS * 1000);\n      this.setState({\n        currentScore: score\n      });\n      this.setState({\n        questionIndex: nextQIndex\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        style: styles.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, __jsx(Backdrop, {\n        open: this.state.showFeedback,\n        style: styles.feedbackWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, __jsx(FeedbackComponent, {\n        wasCorrect: this.state.lastQuestionCorrect,\n        correctAnswer: this.state.lastQuestionAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      })), __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.questionIndex < this.props.numQuestions && __jsx(React.Fragment, null, __jsx(\"p\", {\n        style: styles.questionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \"   \"), __jsx(AnswersComponent, {\n        answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n        callback: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), this.state.questionIndex >= this.props.numQuestions && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n        score: this.state.currentScore,\n        callback: this.props.callback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return QuestionsComponent;\n}(Component);\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["React","Component","Button","DangerButton","Grid","Backdrop","AnswersComponent","GameOverComponent","FeedbackComponent","Entities","require","AllHtmlEntities","styles","entities","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","nextQuestion","bind","onGetQuestions","category","finalCateg","requestString","String","numQuestions","fetch","response","json","allData","setState","questionsArr","isCorrect","correctAnswer","score","nextQIndex","setTimeout","root","feedbackWrapper","questionText","decode","text","answers","callback"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,gBAAP,MAA6B,WAA7B;AACA,OAAOC,iBAAP,MAA8B,YAA9B;AACA,OAAOC,iBAAP,MAA8B,YAA9B;;AACA,IAAMC,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,eAA1C;;AACA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,IAAMC,QAAQ,GAAG,IAAIJ,QAAJ,EAAjB;AAEA,IAAMK,uBAAuB,GAAG,CAAhC,C,CAEA;;IACMC,kB;;;AAEJ,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,4FAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,YAAY,EAAE,IAFH;AAGXC,MAAAA,QAAQ,EAAE,CAHC;AAIXC,MAAAA,aAAa,EAAE,CAJJ;AAKXC,MAAAA,YAAY,EAAE,CALH;AAMXC,MAAAA,YAAY,EAAE,KANH;AAOXC,MAAAA,mBAAmB,EAAE,KAPV;AAQXC,MAAAA,kBAAkB,EAAE;AART,KAAb;AAWA,UAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AAdiB;AAelB,G,CAED;;;;;yCACqB;AACnB,WAAKC,cAAL;AACD,K,CAED;;;;mCACqBC,Q;;;;;;AACbC,cAAAA,U,GAAaD,QAAQ,IAAI,IAAZ,GAAmB,qBAAnB,GAA2CA,Q,EAE9D;;AACME,cAAAA,a,GAAgBD,UAAU,GAAG,SAAb,GAAyBE,MAAM,CAAC,KAAKhB,KAAL,CAAWiB,YAAZ,C;;+CAC9BC,KAAK,CAAC,4DAA4DH,aAA7D,C;;;AAAtBI,cAAAA,Q;;+CACgBA,QAAQ,CAACC,IAAT,E;;;AAAhBC,cAAAA,O;AAEN,mBAAKC,QAAL,CAAc;AAAEC,gBAAAA,YAAY,EAAEF;AAAhB,eAAd;;;;;;;;MAIF;;;;iCACaG,S,EAAWC,a,EAAe;AAAA;;AACrC,UAAMC,KAAK,GAAGF,SAAS,GAAG,KAAKvB,KAAL,CAAWK,YAAX,GAA0B,CAA7B,GAAiC,KAAKL,KAAL,CAAWK,YAAnE;AACA,UAAMqB,UAAU,GAAG,KAAK1B,KAAL,CAAWI,aAAX,GAA2B,CAA9C;AAEA,WAAKiB,QAAL,CAAc;AAAEd,QAAAA,mBAAmB,EAAEgB;AAAvB,OAAd;AACA,WAAKF,QAAL,CAAc;AAAEb,QAAAA,kBAAkB,EAAEgB;AAAtB,OAAd;AACA,WAAKH,QAAL,CAAc;AAAEf,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACAqB,MAAAA,UAAU,CAAC,YAAM;AACf,QAAA,MAAI,CAACN,QAAL,CAAc;AAAEf,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACD,OAFS,EAEPT,uBAAuB,GAAG,IAFnB,CAAV;AAIA,WAAKwB,QAAL,CAAc;AAAEhB,QAAAA,YAAY,EAAEoB;AAAhB,OAAd;AACA,WAAKJ,QAAL,CAAc;AAAEjB,QAAAA,aAAa,EAAEsB;AAAjB,OAAd;AACD;;;6BAEQ;AACP,aACE;AAAK,QAAA,KAAK,EAAE/B,MAAM,CAACiC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,MAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAK5B,KAAL,CAAWM,YAA3B;AAAyC,QAAA,KAAK,EAAEX,MAAM,CAACkC,eAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,iBAAD;AACE,QAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWO,mBADzB;AAEE,QAAA,aAAa,EAAE,KAAKP,KAAL,CAAWQ,kBAF5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFA,EASA,MAAC,IAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,SAAS,EAAC,QAFZ;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,UAAU,EAAC,QAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,KAAKR,KAAL,CAAWI,aAAX,GAA2B,KAAKL,KAAL,CAAWiB,YAAtC,IAAsD,4BACvD;AAAG,QAAA,KAAK,EAAErB,MAAM,CAACmC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAK9B,KAAL,CAAWsB,YAAX,IAA2B1B,QAAQ,CAACmC,MAAT,CAAiB,KAAK/B,KAAL,CAAWsB,YAAX,CAAwB,KAAKtB,KAAL,CAAWI,aAAnC,EAAkD4B,IAAnE,CAA3D,QADuD,EAEvD,MAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWsB,YAAX,IAA2B,KAAKtB,KAAL,CAAWsB,YAAX,CAAwB,KAAKtB,KAAL,CAAWI,aAAnC,EAAkD6B,OAAxG;AAAiH,QAAA,QAAQ,EAAE,KAAKxB,YAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFuD,CAPzD,EAaG,KAAKT,KAAL,CAAWI,aAAX,IAA4B,KAAKL,KAAL,CAAWiB,YAAvC,IAAuD,4BAExD,MAAC,iBAAD;AAAmB,QAAA,KAAK,EAAE,KAAKhB,KAAL,CAAWK,YAArC;AAAmD,QAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWmC,QAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFwD,CAb1D,CATA,CADF;AAgCD;;;;EAtF8BlD,S;;AAyFjC,eAAec,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nimport FeedbackComponent from './Feedback'\nconst Entities = require('html-entities').AllHtmlEntities\nimport { styles } from '../stylesheet.js'\n\nconst entities = new Entities();\n\nconst FEEDBACK_SHOW_TIME_SECS = 2\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    //fetch questions\n    const requestString = finalCateg + \"/count/\" + String(this.props.numQuestions)\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + requestString)\n    const allData = await response.json()\n\n    this.setState({ questionsArr: allData })\n\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ lastQuestionCorrect: isCorrect})\n    this.setState({ lastQuestionAnswer: correctAnswer})\n    this.setState({ showFeedback: true})\n    setTimeout(() => {\n      this.setState({ showFeedback: false})\n    }, FEEDBACK_SHOW_TIME_SECS * 1000)\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n  render() {\n    return (\n      <div style={styles.root}>\n\n      <Backdrop open={this.state.showFeedback} style={styles.feedbackWrapper}>\n        <FeedbackComponent\n          wasCorrect={this.state.lastQuestionCorrect}\n          correctAnswer={this.state.lastQuestionAnswer}\n        />\n      </Backdrop>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < this.props.numQuestions && <>\n        <p style={styles.questionText}>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= this.props.numQuestions && <>\n\n        <GameOverComponent score={this.state.currentScore} callback={this.props.callback}></GameOverComponent>\n\n        </>}\n\n        </Grid>\n\n      </div>)\n  }\n\n}\nexport default QuestionsComponent\n"]},"metadata":{},"sourceType":"module"}