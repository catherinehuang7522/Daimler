{"ast":null,"code":"var _jsxFileName = \"/Users/ken/Documents/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\nconst styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n};\nconst MAX_NUM_QUESTIONS = 5;\n\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentWillMount() {\n    this.onGetQuestions();\n  }\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category;\n    console.log(\"Starting out\"); //fetch questions\n\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg);\n    console.log(\"response is: \");\n    console.log(response);\n    const allData = await response.json();\n    console.log(\"All Data: \");\n    console.log(allData);\n    this.setState({\n      questionsArr: allData\n    }); // this.setState({ currentQ: allData[this.state.questionIndex].text })\n    // this.setState({ currentAnswers: allData[this.state.questionIndex].answers })\n  }\n\n  nextQuestion(isCorrect) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n    this.setState({\n      currentScore: score\n    });\n    this.setState({\n      questionIndex: nextQIndex\n    });\n  }\n\n  render() {\n    return __jsx(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].text), __jsx(AnswersComponent, {\n      answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n      callback: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null));\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/ken/Documents/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["React","Component","Button","DangerButton","Grid","AnswersComponent","GameOverComponent","styles","container","display","justifyContent","alignItems","flexDirection","root","flexGrow","MAX_NUM_QUESTIONS","QuestionsComponent","constructor","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","nextQuestion","bind","componentWillMount","onGetQuestions","category","finalCateg","console","log","response","fetch","allData","json","setState","questionsArr","isCorrect","score","nextQIndex","render","text","answers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\n\n\nconst styles = ({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n})\n\nconst MAX_NUM_QUESTIONS = 5\n\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    console.log(\"Starting out\")\n    //fetch questions\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg)\n    console.log(\"response is: \")\n    console.log(response)\n\n\n    const allData = await response.json()\n    console.log(\"All Data: \")\n    console.log(allData)\n\n\n    this.setState({ questionsArr: allData })\n    // this.setState({ currentQ: allData[this.state.questionIndex].text })\n    // this.setState({ currentAnswers: allData[this.state.questionIndex].answers })\n\n  }\n\n  nextQuestion(isCorrect) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n\n\n\n  render() {\n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < MAX_NUM_QUESTIONS && <>\n        <p>{this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].text}</p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= MAX_NUM_QUESTIONS && <>\n\n        \n        \n        </>}\n\n        </Grid>\n       \n        \n        )\n  }\n\n}\nexport default QuestionsComponent"]},"metadata":{},"sourceType":"module"}