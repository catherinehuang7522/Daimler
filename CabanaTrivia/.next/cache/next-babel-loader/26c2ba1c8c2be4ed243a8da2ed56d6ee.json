{"ast":null,"code":"var _jsxFileName = \"/Users/jack/Google Drive/Winter Quarter 2020/CS 210/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\nimport FeedbackComponent from './Feedback';\n\nconst Entities = require('html-entities').AllHtmlEntities;\n\nconst entities = new Entities();\nconst styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n};\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2;\n\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentWillMount() {\n    this.onGetQuestions();\n  }\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category; //fetch questions\n\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg);\n    const allData = await response.json();\n    this.setState({\n      questionsArr: allData\n    });\n  }\n\n  nextQuestion(isCorrect) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n    this.setState({\n      showFeedback: true\n    });\n    setTimeout(this.setState({\n      showFeedback: false\n    }), FEEDBACK_SHOW_TIME_SECS * 1000);\n    this.setState({\n      currentScore: score\n    });\n    this.setState({\n      questionIndex: nextQIndex\n    });\n  }\n\n  render() {\n    return __jsx(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.showFeedback && __jsx(FeedbackComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \"   \"), __jsx(AnswersComponent, {\n      answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n      callback: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n      score: this.state.currentScore,\n      callback: this.props.callback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/jack/Google Drive/Winter Quarter 2020/CS 210/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["React","Component","Button","DangerButton","Grid","AnswersComponent","GameOverComponent","FeedbackComponent","Entities","require","AllHtmlEntities","entities","styles","container","display","justifyContent","alignItems","flexDirection","root","flexGrow","MAX_NUM_QUESTIONS","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","constructor","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","nextQuestion","bind","componentWillMount","onGetQuestions","category","finalCateg","response","fetch","allData","json","setState","questionsArr","isCorrect","score","nextQIndex","setTimeout","render","decode","text","answers","callback"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nimport FeedbackComponent from './Feedback'\nconst Entities = require('html-entities').AllHtmlEntities\n\nconst entities = new Entities();\n\nconst styles = ({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n})\n\nconst MAX_NUM_QUESTIONS = 3\nconst FEEDBACK_SHOW_TIME_SECS = 2\n\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    //fetch questions\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg)\n    const allData = await response.json()\n\n    this.setState({ questionsArr: allData })\n\n  }\n\n  nextQuestion(isCorrect) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ showFeedback: true})\n    setTimeout(\n      this.setState({ showFeedback: false}),\n      FEEDBACK_SHOW_TIME_SECS * 1000\n    )\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n  render() {\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.showFeedback &&\n        <FeedbackComponent/>}\n\n        {this.state.questionIndex < MAX_NUM_QUESTIONS && <>\n        <p>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= MAX_NUM_QUESTIONS && <>\n\n        <GameOverComponent score={this.state.currentScore} callback={this.props.callback}></GameOverComponent>\n\n        </>}\n\n        </Grid>)\n  }\n\n}\nexport default QuestionsComponent\n"]},"metadata":{},"sourceType":"module"}