{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Answers.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nvar Entities = require(\"html-entities\").AllHtmlEntities;\n\nvar entities = new Entities(); // component that displays the answers\n\nvar AnswersComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AnswersComponent, _Component);\n\n  var _super = _createSuper(AnswersComponent);\n\n  function AnswersComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AnswersComponent);\n\n    _this = _super.call(this, props);\n    _this.onPressAnswer = _this.onPressAnswer.bind(_assertThisInitialized(_this));\n    return _this;\n  } // executed when answer is pressed\n\n\n  _createClass(AnswersComponent, [{\n    key: \"onPressAnswer\",\n    value: function onPressAnswer(answerObj) {\n      var correctAnswer;\n\n      for (var i in this.props.answers) {\n        var currAnswerObj = this.props.answers[i];\n        console.log(\"current answer is: \");\n        console.log(currAnswerObj);\n\n        if (currAnswerObj.correct) {\n          correctAnswer = entities.decode(currAnswerObj.text); // decoding because some of the questions and answers have HTML entities e.g. &quot;\n\n          break;\n        }\n      }\n\n      this.props.callback(answerObj.correct, correctAnswer);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //did the null check because it may take time for the API to return the values\n      if (!this.props.answers) return null;\n      var answer1 = this.props.answers[0];\n      var answer2 = this.props.answers[1]; // initialize these and set  when we have 4 choice multiple choice questions rather than true/false questions\n\n      var answer3 = null;\n      var answer4 = null;\n\n      if (this.props.answers.length === 4) {\n        answer3 = this.props.answers[2];\n        answer4 = this.props.answers[3];\n      }\n\n      return __jsx(Grid, {\n        columnGrid: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 7\n        }\n      }, __jsx(Grid, {\n        rowGrid: true,\n        spacing: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, __jsx(Button, {\n        style: styles.unselectedButton,\n        onClick: function onClick() {\n          return _this2.onPressAnswer(answer1);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, entities.decode(answer1.text), \" \"), __jsx(Button, {\n        style: styles.unselectedButton,\n        onClick: function onClick() {\n          return _this2.onPressAnswer(answer2);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, entities.decode(answer2.text))), __jsx(Grid, {\n        rowGrid: true,\n        spacing: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, this.props.answers.length === 4 && __jsx(Button, {\n        style: styles.unselectedButton,\n        onClick: function onClick() {\n          return _this2.onPressAnswer(answer3);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 50\n        }\n      }, entities.decode(answer3.text), \" \"), this.props.answers.length === 4 && __jsx(Button, {\n        style: styles.unselectedButton,\n        onClick: function onClick() {\n          return _this2.onPressAnswer(answer4);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 50\n        }\n      }, entities.decode(answer4.text))));\n    }\n  }]);\n\n  return AnswersComponent;\n}(Component);\n\nexport default AnswersComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Answers.js"],"names":["styles","React","Component","Button","Grid","Entities","require","AllHtmlEntities","entities","AnswersComponent","props","onPressAnswer","bind","answerObj","correctAnswer","i","answers","currAnswerObj","console","log","correct","decode","text","callback","answer1","answer2","answer3","answer4","length","unselectedButton"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\n// component that displays the answers\nclass AnswersComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onPressAnswer = this.onPressAnswer.bind(this);\n  }\n\n  // executed when answer is pressed\n  onPressAnswer(answerObj) {\n    let correctAnswer;\n    for (let i in this.props.answers) {\n      let currAnswerObj = this.props.answers[i];\n      console.log(\"current answer is: \");\n      console.log(currAnswerObj)\n\n      if (currAnswerObj.correct) {\n        correctAnswer = entities.decode(currAnswerObj.text); // decoding because some of the questions and answers have HTML entities e.g. &quot;\n        break;\n      }\n    }\n\n    this.props.callback(answerObj.correct, correctAnswer);\n  }\n\n  render() {\n    //did the null check because it may take time for the API to return the values\n    if( !this.props.answers ) return null\n\n    const answer1 = this.props.answers[0];\n    const answer2 = this.props.answers[1];\n\n    // initialize these and set  when we have 4 choice multiple choice questions rather than true/false questions\n    let answer3 = null;\n    let answer4 = null;\n    if (this.props.answers.length ===  4){\n      answer3 = this.props.answers[2];\n      answer4 = this.props.answers[3];\n    }\n\n    return (\n      <Grid\n        columnGrid\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid rowGrid spacing={1}>\n          <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer1)}\n          >\n            {entities.decode(answer1.text)}{\" \"}\n          </Button>\n          <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer2)}\n          >\n            {entities.decode(answer2.text)}\n          </Button>\n        </Grid>\n\n        <Grid rowGrid spacing={1}>\n          { (this.props.answers.length === 4) && <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer3)}\n          >\n            {entities.decode(answer3.text)}{\" \"}\n          </Button>}\n          { (this.props.answers.length === 4) && <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer4)}\n          >\n            {entities.decode(answer4.text)}\n          </Button> }\n        </Grid>\n      </Grid>\n    );\n  }\n}\nexport default AnswersComponent;\n"]},"metadata":{},"sourceType":"module"}