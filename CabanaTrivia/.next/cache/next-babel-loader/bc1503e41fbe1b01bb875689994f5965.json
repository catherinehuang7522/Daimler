{"ast":null,"code":"var _jsxFileName = \"/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\nimport FeedbackComponent from './Feedback';\n\nconst Entities = require('html-entities').AllHtmlEntities;\n\nimport { styles } from '../stylesheet.js';\nconst entities = new Entities();\nconst FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n  } // calls function to fetch the questions before the component mounts\n\n\n  componentWillMount() {\n    this.onGetQuestions();\n  } // fetch quesions from cocktail trivia\n\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category; //fetch questions\n\n    const requestString = finalCateg + \"/count/\" + String(this.props.numQuestions);\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + requestString);\n    const allData = await response.json();\n    this.setState({\n      questionsArr: allData\n    });\n  } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n    this.setState({\n      lastQuestionCorrect: isCorrect\n    });\n    this.setState({\n      lastQuestionAnswer: correctAnswer\n    });\n    this.setState({\n      showFeedback: true\n    });\n    setTimeout(() => {\n      this.setState({\n        showFeedback: false\n      });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n    this.setState({\n      currentScore: score\n    });\n    this.setState({\n      questionIndex: nextQIndex\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      style: styles.questionsRoot,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, __jsx(Backdrop, {\n      open: this.state.showFeedback,\n      style: styles.feedbackWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, __jsx(FeedbackComponent, {\n      wasCorrect: this.state.lastQuestionCorrect,\n      correctAnswer: this.state.lastQuestionAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), __jsx(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.questionIndex < this.props.numQuestions && __jsx(React.Fragment, null, __jsx(\"p\", {\n      style: styles.questionText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \"   \"), __jsx(AnswersComponent, {\n      answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n      callback: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), this.state.questionIndex >= this.props.numQuestions && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n      score: this.state.currentScore,\n      callback: this.props.callback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/johnsonsong/Desktop/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["React","Component","Button","DangerButton","Grid","Backdrop","AnswersComponent","GameOverComponent","FeedbackComponent","Entities","require","AllHtmlEntities","styles","entities","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","constructor","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","nextQuestion","bind","componentWillMount","onGetQuestions","category","finalCateg","requestString","String","numQuestions","response","fetch","allData","json","setState","questionsArr","isCorrect","correctAnswer","score","nextQIndex","setTimeout","render","questionsRoot","feedbackWrapper","questionText","decode","text","answers","callback"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nimport FeedbackComponent from './Feedback'\nconst Entities = require('html-entities').AllHtmlEntities\nimport { styles } from '../stylesheet.js'\n\nconst entities = new Entities();\n\nconst FEEDBACK_SHOW_TIME_SECS = 2\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    //fetch questions\n    const requestString = finalCateg + \"/count/\" + String(this.props.numQuestions)\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + requestString)\n    const allData = await response.json()\n\n    this.setState({ questionsArr: allData })\n\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ lastQuestionCorrect: isCorrect})\n    this.setState({ lastQuestionAnswer: correctAnswer})\n    this.setState({ showFeedback: true})\n    setTimeout(() => {\n      this.setState({ showFeedback: false})\n    }, FEEDBACK_SHOW_TIME_SECS * 1000)\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n  render() {\n    return (\n      <div style={styles.questionsRoot}>\n\n      <Backdrop open={this.state.showFeedback} style={styles.feedbackWrapper}>\n        <FeedbackComponent\n          wasCorrect={this.state.lastQuestionCorrect}\n          correctAnswer={this.state.lastQuestionAnswer}\n        />\n      </Backdrop>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < this.props.numQuestions && <>\n        <p style={styles.questionText}>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= this.props.numQuestions && <>\n\n        <GameOverComponent score={this.state.currentScore} callback={this.props.callback}></GameOverComponent>\n\n        </>}\n\n        </Grid>\n\n      </div>)\n  }\n\n}\nexport default QuestionsComponent\n"]},"metadata":{},"sourceType":"module"}