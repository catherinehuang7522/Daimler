{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport { CATEGORIES_MAP } from '../constants';\n\nvar Entities = require(\"html-entities\").AllHtmlEntities;\n\nvar entities = new Entities();\nvar MAX_NUM_QUESTIONS = 3;\nvar FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nvar QuestionsComponent = /*#__PURE__*/function (_Component) {\n  _inherits(QuestionsComponent, _Component);\n\n  function QuestionsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionsComponent).call(this, props));\n    _this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n      urlLinks: []\n    };\n    _this.nextQuestion = _this.nextQuestion.bind(_assertThisInitialized(_this));\n    _this.getUrls = _this.getUrls.bind(_assertThisInitialized(_this));\n    _this.parseQuestionAnswerFormat = _this.parseQuestionAnswerFormat.bind(_assertThisInitialized(_this));\n    return _this;\n  } // calls function to fetch the questions before the component mounts\n\n\n  _createClass(QuestionsComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getUrls(this.props.diff);\n      this.onGetQuestions();\n    }\n  }, {\n    key: \"getUrls\",\n    value: function getUrls(difficulty) {\n      for (var index = 0; index < this.props.cat.length; index++) {\n        customID = \"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[index] + \"&difficulty=\" + difficulty; //Add category to array\n\n        var input = this.state.categoriesChosen.concat(customID);\n        this.setState({\n          categoriesChosen: input\n        });\n      }\n    } // fetch quesions from cocktail trivia\n\n  }, {\n    key: \"onGetQuestions\",\n    value: function onGetQuestions(category) {\n      var finalCateg, numQs, difficulty, response, allData;\n      return _regeneratorRuntime.async(function onGetQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              finalCateg = category == null ? \"MUSIC\" : category; // pass in the category as you wish\n\n              numQs = \"10\"; // change this or pass it into the function\n\n              difficulty = this.props.diff; // const response = await fetch(\n              //   \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[finalCateg]+\"&difficulty=\"+difficulty\n              // )\n\n              response = _Promise.all(urlLinks.map(function (url) {\n                return fetch(url);\n              }));\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              allData = _context.sent;\n              // parse the question to the same format\n              allData = this.parseQuestionAnswerFormat(allData.results);\n              this.setState({\n                questionsArr: allData\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    } // shuffles the array of answers for randomness\n\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(a) {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    }\n    /*This function parses the result from the API to the same format that was used in the previous API*/\n\n  }, {\n    key: \"parseQuestionAnswerFormat\",\n    value: function parseQuestionAnswerFormat(arr) {\n      var finalArr = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          var questionObj = {};\n          questionObj.text = item.question;\n          var answers = [{\n            text: item.correct_answer,\n            correct: true\n          }];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _getIterator(item.incorrect_answers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var answerObj = _step2.value;\n              answers.push({\n                text: answerObj,\n                correct: false\n              });\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                _iterator2[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          this.shuffleArray(answers);\n          questionObj.answers = answers;\n          finalArr.push(questionObj);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return finalArr;\n    } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion(isCorrect, correctAnswer) {\n      var _this2 = this;\n\n      var score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n      var nextQIndex = this.state.questionIndex + 1;\n      this.setState({\n        lastQuestionCorrect: isCorrect\n      });\n      this.setState({\n        lastQuestionAnswer: correctAnswer\n      });\n      this.setState({\n        showFeedback: true\n      });\n      setTimeout(function () {\n        _this2.setState({\n          showFeedback: false\n        });\n      }, FEEDBACK_SHOW_TIME_SECS * 1000);\n      this.setState({\n        currentScore: score\n      });\n      this.setState({\n        questionIndex: nextQIndex\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat);\n      console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff);\n      return __jsx(\"div\", {\n        style: styles.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, __jsx(Backdrop, {\n        open: this.state.showFeedback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, __jsx(FeedbackComponent, {\n        wasCorrect: this.state.lastQuestionCorrect,\n        correctAnswer: this.state.lastQuestionAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      })), __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n        style: styles.questionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \" \"), __jsx(AnswersComponent, {\n        answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n        callback: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n        score: this.state.currentScore,\n        callback: this.props.callback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return QuestionsComponent;\n}(Component);\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["styles","React","Component","Grid","Backdrop","AnswersComponent","CategoriesComponent","GameOverComponent","FeedbackComponent","IndexPage","CATEGORIES_MAP","Entities","require","AllHtmlEntities","entities","MAX_NUM_QUESTIONS","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","urlLinks","nextQuestion","bind","getUrls","parseQuestionAnswerFormat","diff","onGetQuestions","difficulty","index","cat","length","customID","numQs","input","categoriesChosen","concat","setState","category","finalCateg","response","all","map","url","fetch","json","allData","results","questionsArr","a","j","x","i","Math","floor","random","arr","finalArr","item","questionObj","text","question","answers","correct_answer","correct","incorrect_answers","answerObj","push","shuffleArray","isCorrect","correctAnswer","score","nextQIndex","setTimeout","console","log","root","questionText","decode","callback"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport {CATEGORIES_MAP} from '../constants'\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2;\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n      urlLinks: [],\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getUrls = this.getUrls.bind(this);\n    this.parseQuestionAnswerFormat = this.parseQuestionAnswerFormat.bind(this)\n  }\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n      this.getUrls(this.props.diff);\n      this.onGetQuestions();\n  }\n\n  getUrls(difficulty){\n    for(let index = 0; index < this.props.cat.length; index ++) {\n      customID = \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[index]+\"&difficulty=\"+difficulty\n\n      //Add category to array\n      var input = this.state.categoriesChosen.concat(customID)\n      this.setState({categoriesChosen : input })\n\n    }\n\n  }\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"MUSIC\" : category;  // pass in the category as you wish\n    const numQs = \"10\"  // change this or pass it into the function\n    const difficulty = this.props.diff\n\n    // const response = await fetch(\n    //   \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[finalCateg]+\"&difficulty=\"+difficulty\n    // )\n\n    const response = Promise.all(urlLinks.map(url =>fetch(url)))\n\n    let allData = await response.json();\n    // parse the question to the same format\n    allData = this.parseQuestionAnswerFormat(allData.results)\n    this.setState({ questionsArr: allData });\n  }\n\n// shuffles the array of answers for randomness\n  shuffleArray(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n/*This function parses the result from the API to the same format that was used in the previous API*/\n  parseQuestionAnswerFormat(arr){\n    const finalArr = []\n    for (const item of arr){\n      const questionObj = {}\n      questionObj.text = item.question\n      const answers = [{ text: item.correct_answer, correct: true}]\n      for (const answerObj of item.incorrect_answers){\n        answers.push({text: answerObj, correct: false})\n      }\n      this.shuffleArray(answers)\n      questionObj.answers = answers\n      finalArr.push(questionObj)\n    }\n    return finalArr\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect\n      ? this.state.currentScore + 1\n      : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n\n    this.setState({ lastQuestionCorrect: isCorrect });\n    this.setState({ lastQuestionAnswer: correctAnswer });\n    this.setState({ showFeedback: true });\n    setTimeout(() => {\n      this.setState({ showFeedback: false });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n\n    this.setState({ currentScore: score });\n    this.setState({ questionIndex: nextQIndex });\n  }\n\n  render() {\n    console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat)\n\n    console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff)\n\n    return (\n      <div style={styles.root}>\n        <Backdrop open={this.state.showFeedback}>\n          <FeedbackComponent\n            wasCorrect={this.state.lastQuestionCorrect}\n            correctAnswer={this.state.lastQuestionAnswer}\n          />\n        </Backdrop>\n\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          {this.state.questionIndex < MAX_NUM_QUESTIONS && (\n            <>\n              <p style={styles.questionText}>\n                {this.state.questionsArr &&\n                  entities.decode(\n                    this.state.questionsArr[this.state.questionIndex].text\n                  )}{\" \"}\n              </p>\n              <AnswersComponent\n                answers={\n                  this.state.questionsArr &&\n                  this.state.questionsArr[this.state.questionIndex].answers\n                }\n                callback={this.nextQuestion}\n              ></AnswersComponent>\n            </>\n          )}\n\n          {this.state.questionIndex >= MAX_NUM_QUESTIONS && (\n            <>\n              <GameOverComponent\n                score={this.state.currentScore}\n                callback={this.props.callback}\n              ></GameOverComponent>\n            </>\n          )}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default QuestionsComponent;\n"]},"metadata":{},"sourceType":"module"}