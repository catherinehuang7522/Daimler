{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ken/Documents/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport DangerButton from './DangerButton';\nimport Grid from '@material-ui/core/Grid';\nimport AnswersComponent from './Answers';\nimport GameOverComponent from './GameOver';\n\nvar Entities = require('html-entities').AllHtmlEntities;\n\nvar entities = new Entities();\nvar styles = {\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n};\nvar MAX_NUM_QUESTIONS = 3;\n\nvar QuestionsComponent = /*#__PURE__*/function (_Component) {\n  _inherits(QuestionsComponent, _Component);\n\n  function QuestionsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionsComponent).call(this, props));\n    _this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0\n    };\n    _this.nextQuestion = _this.nextQuestion.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(QuestionsComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.onGetQuestions();\n    }\n  }, {\n    key: \"onGetQuestions\",\n    value: function onGetQuestions(category) {\n      var finalCateg, response, allData;\n      return _regeneratorRuntime.async(function onGetQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              finalCateg = category == null ? \"entertainment-music\" : category;\n              console.log(\"Starting out\"); //fetch questions\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg));\n\n            case 4:\n              response = _context.sent;\n              console.log(\"response is: \");\n              console.log(response);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              allData = _context.sent;\n              console.log(\"All Data: \");\n              console.log(allData);\n              this.setState({\n                questionsArr: allData\n              }); // this.setState({ currentQ: allData[this.state.questionIndex].text })\n              // this.setState({ currentAnswers: allData[this.state.questionIndex].answers })\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion(isCorrect) {\n      var score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n      var nextQIndex = this.state.questionIndex + 1;\n      this.setState({\n        currentScore: score\n      });\n      this.setState({\n        questionIndex: nextQIndex\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const question = entities.decode( this.state.questionsArr[this.state.questionIndex].text}) \n      return __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \"   \"), __jsx(AnswersComponent, {\n        answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n        callback: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n        score: this.state.currentScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return QuestionsComponent;\n}(Component);\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/ken/Documents/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["React","Component","Button","DangerButton","Grid","AnswersComponent","GameOverComponent","Entities","require","AllHtmlEntities","entities","styles","container","display","justifyContent","alignItems","flexDirection","root","flexGrow","MAX_NUM_QUESTIONS","QuestionsComponent","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","nextQuestion","bind","onGetQuestions","category","finalCateg","console","log","fetch","response","json","allData","setState","questionsArr","isCorrect","score","nextQIndex","decode","text","answers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nconst Entities = require('html-entities').AllHtmlEntities\n\nconst entities = new Entities();\n\nconst styles = ({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n})\n\nconst MAX_NUM_QUESTIONS = 3\n\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    console.log(\"Starting out\")\n    //fetch questions\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg)\n    console.log(\"response is: \")\n    console.log(response)\n\n\n    const allData = await response.json()\n    console.log(\"All Data: \")\n    console.log(allData)\n\n\n    this.setState({ questionsArr: allData })\n    // this.setState({ currentQ: allData[this.state.questionIndex].text })\n    // this.setState({ currentAnswers: allData[this.state.questionIndex].answers })\n\n  }\n\n  nextQuestion(isCorrect) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n\n\n\n  render() {\n\n    // const question = entities.decode( this.state.questionsArr[this.state.questionIndex].text}) \n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < MAX_NUM_QUESTIONS && <>\n        <p>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= MAX_NUM_QUESTIONS && <>\n\n        <GameOverComponent score={this.state.currentScore}></GameOverComponent>\n        \n        </>}\n\n        </Grid>\n       \n        \n        )\n  }\n\n}\nexport default QuestionsComponent"]},"metadata":{},"sourceType":"module"}