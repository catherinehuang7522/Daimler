{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport { CATEGORIES_MAP } from '../constants';\n\nvar Entities = require(\"html-entities\").AllHtmlEntities;\n\nvar entities = new Entities();\nvar MAX_NUM_QUESTIONS = 3;\nvar FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nvar QuestionsComponent = /*#__PURE__*/function (_Component) {\n  _inherits(QuestionsComponent, _Component);\n\n  function QuestionsComponent(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionsComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionsComponent).call(this, props));\n    _this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    _this.nextQuestion = _this.nextQuestion.bind(_assertThisInitialized(_this));\n    _this.getUrls = _this.getUrls.bind(_assertThisInitialized(_this)); //this.fetchUrls = this.fetchUrls.bind(this);\n\n    _this.parseQuestionAnswerFormat = _this.parseQuestionAnswerFormat.bind(_assertThisInitialized(_this));\n    return _this;\n  } // calls function to fetch the questions before the component mounts\n\n\n  _createClass(QuestionsComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.onGetQuestions();\n    }\n    /*\n    function: getUrls\n    Iterates over the user's selected categories (stored in this.props.cat)\n    Creates a custom URL for each category\n    Returns an array with all the URLS to fetch\n    */\n\n  }, {\n    key: \"getUrls\",\n    value: function getUrls(categories) {\n      var urls = [];\n      var customURL = \"\";\n      var numQs = MAX_NUM_QUESTIONS; // change this or pass it into the function\n\n      for (var i = 0; i < categories.length; i++) {\n        customURL = \"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[categories[i]] + \"&difficulty=\" + this.props.diff; //Add URL LINK to array\n\n        urls.push(customURL);\n      }\n\n      return urls;\n    }\n    /*\n    function: fetchUrls\n    Iterates over the array of API requests and fetch them\n    Returns an arrray with fetch requests\n    */\n    // fetchUrls(urlArray){\n    //   var urlFetchArray = []\n    //   var fetchRequest = \"\"\n    //   for(var i = 0; i < urlArray.length; i ++) {\n    //     singlefetchCall = await fetch(urlArray[i])\n    //     urlFetchArray.push(fetchRequest)\n    // }\n    // return urlFetchArray\n    // }\n    // fetch quesions from cocktail trivia\n\n  }, {\n    key: \"onGetQuestions\",\n    value: function onGetQuestions(category) {\n      var chosenCategories, allUrls, finalCateg, difficulty, numQs, allData1, allDataFinal, temp, fetchRequest, i, response, allData;\n      return _regeneratorRuntime.async(function onGetQuestions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              chosenCategories = this.props.cat;\n              allUrls = this.getUrls(chosenCategories); //const response = this.fetchUrls(allUrls)\n              // console.log(allUrls[0])\n              // console.log(\"THE NEXT ONE IS\")\n              // console.log(allUrls[1])\n\n              finalCateg = category == null ? \"MUSIC\" : category; // pass in the category as you wish\n\n              difficulty = this.props.diff;\n              numQs = MAX_NUM_QUESTIONS; // change this or pass it into the function\n\n              allData1 = [];\n              allDataFinal = [];\n              temp = [];\n              fetchRequest = \"\";\n              i = 0;\n\n            case 10:\n              if (!(i < allUrls.length)) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(fetch(allUrls[i]));\n\n            case 13:\n              fetchRequest = _context.sent;\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(fetchRequest.json());\n\n            case 16:\n              allData1 = _context.sent;\n              temp = this.parseQuestionAnswerFormat(allData1.results);\n              allDataFinal.concat(temp);\n              console.log(allDataFinal);\n\n            case 20:\n              i++;\n              _context.next = 10;\n              break;\n\n            case 23:\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(fetch(\"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[finalCateg] + \"&difficulty=\" + difficulty));\n\n            case 25:\n              response = _context.sent;\n              _context.next = 28;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 28:\n              allData = _context.sent;\n              //  parse the question to the same format\n              allData = this.parseQuestionAnswerFormat(allData.results);\n              this.setState({\n                questionsArr: allData\n              });\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    } // shuffles the array of answers for randomness\n\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(a) {\n      var j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    }\n    /*This function parses the result from the API to the same format that was used in the previous API*/\n\n  }, {\n    key: \"parseQuestionAnswerFormat\",\n    value: function parseQuestionAnswerFormat(arr) {\n      var finalArr = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(arr), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          var questionObj = {};\n          questionObj.text = item.question;\n          var answers = [{\n            text: item.correct_answer,\n            correct: true\n          }];\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = _getIterator(item.incorrect_answers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var answerObj = _step2.value;\n              answers.push({\n                text: answerObj,\n                correct: false\n              });\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                _iterator2[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          this.shuffleArray(answers);\n          questionObj.answers = answers;\n          finalArr.push(questionObj);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return finalArr;\n    } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n  }, {\n    key: \"nextQuestion\",\n    value: function nextQuestion(isCorrect, correctAnswer) {\n      var _this2 = this;\n\n      var score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n      var nextQIndex = this.state.questionIndex + 1;\n      this.setState({\n        lastQuestionCorrect: isCorrect\n      });\n      this.setState({\n        lastQuestionAnswer: correctAnswer\n      });\n      this.setState({\n        showFeedback: true\n      });\n      setTimeout(function () {\n        _this2.setState({\n          showFeedback: false\n        });\n      }, FEEDBACK_SHOW_TIME_SECS * 1000);\n      this.setState({\n        currentScore: score\n      });\n      this.setState({\n        questionIndex: nextQIndex\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //const [allUrls] = this.getUrls()\n      console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat);\n      console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff); //console.log(\"THESE ARE THE URLS \" + allUrls)\n\n      return __jsx(\"div\", {\n        style: styles.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, __jsx(Backdrop, {\n        open: this.state.showFeedback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, __jsx(FeedbackComponent, {\n        wasCorrect: this.state.lastQuestionCorrect,\n        correctAnswer: this.state.lastQuestionAnswer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })), __jsx(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n        style: styles.questionText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \" \"), __jsx(AnswersComponent, {\n        answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n        callback: this.nextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n        score: this.state.currentScore,\n        callback: this.props.callback,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return QuestionsComponent;\n}(Component);\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["styles","React","Component","Grid","Backdrop","AnswersComponent","CategoriesComponent","GameOverComponent","FeedbackComponent","IndexPage","CATEGORIES_MAP","Entities","require","AllHtmlEntities","entities","MAX_NUM_QUESTIONS","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","nextQuestion","bind","getUrls","parseQuestionAnswerFormat","onGetQuestions","categories","urls","customURL","numQs","i","length","diff","push","category","chosenCategories","cat","allUrls","finalCateg","difficulty","allData1","allDataFinal","temp","fetchRequest","fetch","json","results","concat","console","log","response","allData","setState","questionsArr","a","j","x","Math","floor","random","arr","finalArr","item","questionObj","text","question","answers","correct_answer","correct","incorrect_answers","answerObj","shuffleArray","isCorrect","correctAnswer","score","nextQIndex","setTimeout","root","questionText","decode","callback"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport {CATEGORIES_MAP} from '../constants'\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2;\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getUrls = this.getUrls.bind(this);\n    //this.fetchUrls = this.fetchUrls.bind(this);\n    this.parseQuestionAnswerFormat = this.parseQuestionAnswerFormat.bind(this)\n  }\n\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n      this.onGetQuestions();\n  }\n\n\n  /*\n  function: getUrls\n  Iterates over the user's selected categories (stored in this.props.cat)\n  Creates a custom URL for each category\n  Returns an array with all the URLS to fetch\n  */\n\n  getUrls(categories){\n    var urls = []\n    var customURL = \"\"\n    const numQs = MAX_NUM_QUESTIONS  // change this or pass it into the function\n    for(var i = 0; i < categories.length; i ++) {\n      customURL = \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[categories[i]]+\"&difficulty=\"+this.props.diff\n      //Add URL LINK to array\n      urls.push(customURL)\n  }\n  return urls\n}\n\n\n/*\nfunction: fetchUrls\nIterates over the array of API requests and fetch them\nReturns an arrray with fetch requests\n*/\n// fetchUrls(urlArray){\n//   var urlFetchArray = []\n//   var fetchRequest = \"\"\n//   for(var i = 0; i < urlArray.length; i ++) {\n//     singlefetchCall = await fetch(urlArray[i])\n//     urlFetchArray.push(fetchRequest)\n// }\n// return urlFetchArray\n// }\n\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    var chosenCategories = this.props.cat\n    const allUrls = this.getUrls(chosenCategories)\n\n    //const response = this.fetchUrls(allUrls)\n    // console.log(allUrls[0])\n    // console.log(\"THE NEXT ONE IS\")\n    // console.log(allUrls[1])\n    const finalCateg = category == null ? \"MUSIC\" : category;  // pass in the category as you wish\n    const difficulty = this.props.diff\n    const numQs = MAX_NUM_QUESTIONS  // change this or pass it into the function\n\n    var allData1 = []\n    var allDataFinal = []\n    var temp = []\n    var fetchRequest = \"\"\n    for(var i = 0; i < allUrls.length; i ++) {\n      fetchRequest = await fetch(allUrls[i])\n      allData1 = await fetchRequest.json();\n      temp = this.parseQuestionAnswerFormat(allData1.results)\n      allDataFinal.concat(temp)\n      console.log(allDataFinal)\n      }\n\n\n    const response = await fetch(\n      \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[finalCateg]+\"&difficulty=\"+difficulty\n    )\n\n   let allData = await response.json();\n  //  parse the question to the same format\n   allData = this.parseQuestionAnswerFormat(allData.results)\n   this.setState({ questionsArr: allData });\n  }\n\n// shuffles the array of answers for randomness\n  shuffleArray(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n/*This function parses the result from the API to the same format that was used in the previous API*/\n  parseQuestionAnswerFormat(arr){\n    const finalArr = []\n    for (const item of arr){\n      const questionObj = {}\n      questionObj.text = item.question\n      const answers = [{ text: item.correct_answer, correct: true}]\n      for (const answerObj of item.incorrect_answers){\n        answers.push({text: answerObj, correct: false})\n      }\n      this.shuffleArray(answers)\n      questionObj.answers = answers\n      finalArr.push(questionObj)\n    }\n    return finalArr\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect\n      ? this.state.currentScore + 1\n      : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n\n    this.setState({ lastQuestionCorrect: isCorrect });\n    this.setState({ lastQuestionAnswer: correctAnswer });\n    this.setState({ showFeedback: true });\n    setTimeout(() => {\n      this.setState({ showFeedback: false });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n\n    this.setState({ currentScore: score });\n    this.setState({ questionIndex: nextQIndex });\n  }\n\n  render() {\n    //const [allUrls] = this.getUrls()\n\n    console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat)\n\n    console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff)\n\n    //console.log(\"THESE ARE THE URLS \" + allUrls)\n\n\n    return (\n      <div style={styles.root}>\n        <Backdrop open={this.state.showFeedback}>\n          <FeedbackComponent\n            wasCorrect={this.state.lastQuestionCorrect}\n            correctAnswer={this.state.lastQuestionAnswer}\n          />\n        </Backdrop>\n\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          {this.state.questionIndex < MAX_NUM_QUESTIONS && (\n            <>\n              <p style={styles.questionText}>\n                {this.state.questionsArr &&\n                  entities.decode(\n                    this.state.questionsArr[this.state.questionIndex].text\n                  )}{\" \"}\n              </p>\n              <AnswersComponent\n                answers={\n                  this.state.questionsArr &&\n                  this.state.questionsArr[this.state.questionIndex].answers\n                }\n                callback={this.nextQuestion}\n              ></AnswersComponent>\n            </>\n          )}\n\n          {this.state.questionIndex >= MAX_NUM_QUESTIONS && (\n            <>\n              <GameOverComponent\n                score={this.state.currentScore}\n                callback={this.props.callback}\n              ></GameOverComponent>\n            </>\n          )}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default QuestionsComponent;\n"]},"metadata":{},"sourceType":"module"}