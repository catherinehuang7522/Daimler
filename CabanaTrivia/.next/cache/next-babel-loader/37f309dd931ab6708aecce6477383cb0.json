{"ast":null,"code":"var _jsxFileName = \"/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js\";\nvar __jsx = React.createElement;\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport { CATEGORIES_MAP } from '../constants';\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2; // component that displays the questions or the game over component\n\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\"\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getUrls = this.getUrls.bind(this);\n    this.parseQuestionAnswerFormat = this.parseQuestionAnswerFormat.bind(this);\n  } // calls function to fetch the questions before the component mounts\n\n\n  componentWillMount() {\n    this.onGetQuestions();\n  }\n  /*\n  function: getUrls\n  Iterates over the user's selected categories (stored in this.props.cat)\n  Creates a custom URL for each category\n  Appends to the CustomID array defined in state\n   */\n  //TODO:\n  // Currently, urlLinks is just holding the URL for the first category chosen, not all of them. How do we fix them?\n  //We can't use setState in a for loop, because it only updates the state 1 time, so we need a better way\n\n\n  getUrls(finalArray) {\n    var urls = [];\n    var customURL = \"\";\n    const numQs = \"10\"; // change this or pass it into the function\n\n    for (var i = 0; i < finalArray.length; i++) {\n      customURL = \"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[finalArray[i]] + \"&difficulty=\" + this.props.diff; //Add URL LINK to array\n\n      urls.push(customURL);\n    }\n\n    return urls;\n  } // fetch quesions from cocktail trivia\n\n\n  async onGetQuestions(category) {\n    //  const arrayWeGet = this.props.cat\n    const [allUrls] = this.getUrls(this.props.cat);\n    console.log(\"HEY THERE\");\n    const finalCateg = category == null ? \"MUSIC\" : category; // pass in the category as you wish\n\n    const difficulty = this.props.diff;\n    const numQs = \"10\"; // change this or pass it into the function\n\n    const response = await fetch(\"https://opentdb.com/api.php?amount=\" + numQs + \"&category=\" + CATEGORIES_MAP[finalCateg] + \"&difficulty=\" + difficulty); //TODO: Use a Promise so that we can process multiple urls rather than just one.\n    // const response = Promise.all(urlLinks.map(url =>fetch(url)))\n\n    let allData = await response.json(); // parse the question to the same format\n\n    allData = this.parseQuestionAnswerFormat(allData.results);\n    this.setState({\n      questionsArr: allData\n    });\n  } // shuffles the array of answers for randomness\n\n\n  shuffleArray(a) {\n    var j, x, i;\n\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n\n    return a;\n  }\n  /*This function parses the result from the API to the same format that was used in the previous API*/\n\n\n  parseQuestionAnswerFormat(arr) {\n    const finalArr = [];\n\n    for (const item of arr) {\n      const questionObj = {};\n      questionObj.text = item.question;\n      const answers = [{\n        text: item.correct_answer,\n        correct: true\n      }];\n\n      for (const answerObj of item.incorrect_answers) {\n        answers.push({\n          text: answerObj,\n          correct: false\n        });\n      }\n\n      this.shuffleArray(answers);\n      questionObj.answers = answers;\n      finalArr.push(questionObj);\n    }\n\n    return finalArr;\n  } //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n\n\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n    this.setState({\n      lastQuestionCorrect: isCorrect\n    });\n    this.setState({\n      lastQuestionAnswer: correctAnswer\n    });\n    this.setState({\n      showFeedback: true\n    });\n    setTimeout(() => {\n      this.setState({\n        showFeedback: false\n      });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n    this.setState({\n      currentScore: score\n    });\n    this.setState({\n      questionIndex: nextQIndex\n    });\n  }\n\n  render() {\n    //const [allUrls] = this.getUrls()\n    console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat);\n    console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff);\n    console.log(\"THESE ARE THE URLS \" + allUrls);\n    return __jsx(\"div\", {\n      style: styles.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, __jsx(Backdrop, {\n      open: this.state.showFeedback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, __jsx(FeedbackComponent, {\n      wasCorrect: this.state.lastQuestionCorrect,\n      correctAnswer: this.state.lastQuestionAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), __jsx(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.questionIndex < MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(\"p\", {\n      style: styles.questionText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.questionsArr && entities.decode(this.state.questionsArr[this.state.questionIndex].text), \" \"), __jsx(AnswersComponent, {\n      answers: this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers,\n      callback: this.nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), this.state.questionIndex >= MAX_NUM_QUESTIONS && __jsx(React.Fragment, null, __jsx(GameOverComponent, {\n      score: this.state.currentScore,\n      callback: this.props.callback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default QuestionsComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/CabanaTrivia/pages/components/Questions.js"],"names":["styles","React","Component","Grid","Backdrop","AnswersComponent","CategoriesComponent","GameOverComponent","FeedbackComponent","IndexPage","CATEGORIES_MAP","Entities","require","AllHtmlEntities","entities","MAX_NUM_QUESTIONS","FEEDBACK_SHOW_TIME_SECS","QuestionsComponent","constructor","props","state","startGame","singlePlayer","duration","questionIndex","currentScore","showFeedback","lastQuestionCorrect","lastQuestionAnswer","nextQuestion","bind","getUrls","parseQuestionAnswerFormat","componentWillMount","onGetQuestions","finalArray","urls","customURL","numQs","i","length","diff","push","category","allUrls","cat","console","log","finalCateg","difficulty","response","fetch","allData","json","results","setState","questionsArr","shuffleArray","a","j","x","Math","floor","random","arr","finalArr","item","questionObj","text","question","answers","correct_answer","correct","answerObj","incorrect_answers","isCorrect","correctAnswer","score","nextQIndex","setTimeout","render","root","questionText","decode","callback"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport AnswersComponent from \"./Answers\";\nimport CategoriesComponent from \"./Categories\";\nimport GameOverComponent from \"./GameOver\";\nimport FeedbackComponent from \"./Feedback\";\nimport IndexPage from '../index';\nimport {CATEGORIES_MAP} from '../constants'\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\nconst MAX_NUM_QUESTIONS = 3;\nconst FEEDBACK_SHOW_TIME_SECS = 2;\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.getUrls = this.getUrls.bind(this);\n    this.parseQuestionAnswerFormat = this.parseQuestionAnswerFormat.bind(this)\n  }\n\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n      this.onGetQuestions();\n  }\n\n\n  /*\n  function: getUrls\n  Iterates over the user's selected categories (stored in this.props.cat)\n  Creates a custom URL for each category\n  Appends to the CustomID array defined in state\n\n  */\n  //TODO:\n  // Currently, urlLinks is just holding the URL for the first category chosen, not all of them. How do we fix them?\n  //We can't use setState in a for loop, because it only updates the state 1 time, so we need a better way\n\n  getUrls(finalArray){\n    var urls = []\n    var customURL = \"\"\n    const numQs = \"10\"  // change this or pass it into the function\n    for(var i = 0; i < finalArray.length; i ++) {\n      customURL = \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[finalArray[i]]+\"&difficulty=\"+this.props.diff\n      //Add URL LINK to array\n      urls.push(customURL)\n  }\n  return urls\n}\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n  //  const arrayWeGet = this.props.cat\n    const [allUrls] = this.getUrls(this.props.cat)\n    console.log(\"HEY THERE\")\n    const finalCateg = category == null ? \"MUSIC\" : category;  // pass in the category as you wish\n    const difficulty = this.props.diff\n    const numQs = \"10\"  // change this or pass it into the function\n\n    const response = await fetch(\n      \"https://opentdb.com/api.php?amount=\"+numQs+\"&category=\"+CATEGORIES_MAP[finalCateg]+\"&difficulty=\"+difficulty\n    )\n\n    //TODO: Use a Promise so that we can process multiple urls rather than just one.\n    // const response = Promise.all(urlLinks.map(url =>fetch(url)))\n\n    let allData = await response.json();\n    // parse the question to the same format\n    allData = this.parseQuestionAnswerFormat(allData.results)\n    this.setState({ questionsArr: allData });\n  }\n\n// shuffles the array of answers for randomness\n  shuffleArray(a) {\n    var j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n    }\n    return a;\n}\n\n/*This function parses the result from the API to the same format that was used in the previous API*/\n  parseQuestionAnswerFormat(arr){\n    const finalArr = []\n    for (const item of arr){\n      const questionObj = {}\n      questionObj.text = item.question\n      const answers = [{ text: item.correct_answer, correct: true}]\n      for (const answerObj of item.incorrect_answers){\n        answers.push({text: answerObj, correct: false})\n      }\n      this.shuffleArray(answers)\n      questionObj.answers = answers\n      finalArr.push(questionObj)\n    }\n    return finalArr\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect\n      ? this.state.currentScore + 1\n      : this.state.currentScore;\n    const nextQIndex = this.state.questionIndex + 1;\n\n    this.setState({ lastQuestionCorrect: isCorrect });\n    this.setState({ lastQuestionAnswer: correctAnswer });\n    this.setState({ showFeedback: true });\n    setTimeout(() => {\n      this.setState({ showFeedback: false });\n    }, FEEDBACK_SHOW_TIME_SECS * 1000);\n\n    this.setState({ currentScore: score });\n    this.setState({ questionIndex: nextQIndex });\n  }\n\n  render() {\n    //const [allUrls] = this.getUrls()\n\n    console.log(\"THESE WERE THE CATEGORIES CHOSEN \" + this.props.cat)\n\n    console.log(\"THIS WAS THE DIFFICULTY CHOSEN \" + this.props.diff)\n\n    console.log(\"THESE ARE THE URLS \" + allUrls)\n\n\n\n    return (\n      <div style={styles.root}>\n        <Backdrop open={this.state.showFeedback}>\n          <FeedbackComponent\n            wasCorrect={this.state.lastQuestionCorrect}\n            correctAnswer={this.state.lastQuestionAnswer}\n          />\n        </Backdrop>\n\n        <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\n          {this.state.questionIndex < MAX_NUM_QUESTIONS && (\n            <>\n              <p style={styles.questionText}>\n                {this.state.questionsArr &&\n                  entities.decode(\n                    this.state.questionsArr[this.state.questionIndex].text\n                  )}{\" \"}\n              </p>\n              <AnswersComponent\n                answers={\n                  this.state.questionsArr &&\n                  this.state.questionsArr[this.state.questionIndex].answers\n                }\n                callback={this.nextQuestion}\n              ></AnswersComponent>\n            </>\n          )}\n\n          {this.state.questionIndex >= MAX_NUM_QUESTIONS && (\n            <>\n              <GameOverComponent\n                score={this.state.currentScore}\n                callback={this.props.callback}\n              ></GameOverComponent>\n            </>\n          )}\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default QuestionsComponent;\n"]},"metadata":{},"sourceType":"module"}