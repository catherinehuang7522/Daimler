{"version":3,"file":"static/webpack/static/development/pages/index.js.655515bd8de72391d972.hot-update.js","sources":["webpack:///./pages/components/Questions.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nimport FeedbackComponent from './Feedback'\nconst Entities = require('html-entities').AllHtmlEntities\n\nconst entities = new Entities();\n\nconst styles = ({\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  root: {\n    flexGrow: 1\n  }\n})\n\nconst MAX_NUM_QUESTIONS = 3\nconst FEEDBACK_SHOW_TIME_SECS = 2\n\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"TEST\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    //fetch questions\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + finalCateg)\n    const allData = await response.json()\n\n    this.setState({ questionsArr: allData })\n\n  }\n\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ lastQuestionCorrect: isCorrect})\n    this.setState({ lastQuestionAnswer: correctAnswer})\n    this.setState({ showFeedback: true})\n    setTimeout(() => {\n      this.setState({ showFeedback: false})\n    }, FEEDBACK_SHOW_TIME_SECS * 1000)\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n  render() {\n    return (\n      <>\n      <Backdrop className={classes.backdrop} open={this.state.showFeedback}>\n        {this.state.showFeedback &&\n        <FeedbackComponent\n          wasCorrect={this.state.lastQuestionCorrect}\n          correctAnswer={this.state.lastQuestionAnswer}\n        />}\n      </Backdrop>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < MAX_NUM_QUESTIONS && <>\n        <p>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= MAX_NUM_QUESTIONS && <>\n\n        <GameOverComponent score={this.state.currentScore} callback={this.props.callback}></GameOverComponent>\n\n        </>}\n\n        </Grid>\n\n      </>)\n  }\n\n}\nexport default QuestionsComponent\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAPA;AAYA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;;;AAEA;;;;;;AACA;AACA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAlFA;AACA;AAoFA;;;;A","sourceRoot":""}