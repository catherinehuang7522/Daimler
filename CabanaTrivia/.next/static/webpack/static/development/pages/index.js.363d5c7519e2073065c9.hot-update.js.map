{"version":3,"file":"static/webpack/static/development/pages/index.js.363d5c7519e2073065c9.hot-update.js","sources":["webpack:///./pages/components/Questions.js","webpack:///./pages/stylesheet.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button'\nimport DangerButton from './DangerButton'\nimport Grid from '@material-ui/core/Grid'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport AnswersComponent from './Answers'\nimport GameOverComponent from './GameOver'\nimport FeedbackComponent from './Feedback'\nconst Entities = require('html-entities').AllHtmlEntities\nimport { styles } from '../stylesheet.js'\n\nconst entities = new Entities();\n\nconst FEEDBACK_SHOW_TIME_SECS = 2\n\n// component that displays the questions or the game over component\nclass QuestionsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      startGame: true,\n      singlePlayer: true,\n      duration: 1,\n      questionIndex: 0,\n      currentScore: 0,\n      showFeedback: false,\n      lastQuestionCorrect: false,\n      lastQuestionAnswer: \"\",\n    };\n\n    this.nextQuestion = this.nextQuestion.bind(this)\n  }\n\n  // calls function to fetch the questions before the component mounts\n  componentWillMount() {\n    this.onGetQuestions()\n  }\n\n  // fetch quesions from cocktail trivia\n  async onGetQuestions(category) {\n    const finalCateg = category == null ? \"entertainment-music\" : category\n\n    //fetch questions\n    const requestString = finalCateg + \"/count/\" + String(this.props.numQuestions)\n    const response = await fetch(\"https://cocktail-trivia-api.herokuapp.com/api/category/\" + requestString)\n    const allData = await response.json()\n\n    this.setState({ questionsArr: allData })\n\n  }\n\n  //changes to the next question. isCorrect ia a bool for if the previous value was correct. correctAnswer is the correct answer\n  nextQuestion(isCorrect, correctAnswer) {\n    const score = isCorrect ? this.state.currentScore + 1 : this.state.currentScore\n    const nextQIndex = this.state.questionIndex + 1\n\n    this.setState({ lastQuestionCorrect: isCorrect})\n    this.setState({ lastQuestionAnswer: correctAnswer})\n    this.setState({ showFeedback: true})\n    setTimeout(() => {\n      this.setState({ showFeedback: false})\n    }, FEEDBACK_SHOW_TIME_SECS * 1000)\n\n    this.setState({ currentScore: score })\n    this.setState({ questionIndex: nextQIndex })\n  }\n\n  render() {\n    return (\n      <div style={styles.questionsRoot}>\n\n      <Backdrop open={this.state.showFeedback} style={styles.feedbackWrapper}>\n        <FeedbackComponent\n          wasCorrect={this.state.lastQuestionCorrect}\n          correctAnswer={this.state.lastQuestionAnswer}\n        />\n      </Backdrop>\n\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n\n        {this.state.questionIndex < this.props.numQuestions && <>\n        <p style={styles.questionText}>{this.state.questionsArr && entities.decode( this.state.questionsArr[this.state.questionIndex].text) }   </p>\n        <AnswersComponent answers={this.state.questionsArr && this.state.questionsArr[this.state.questionIndex].answers} callback={this.nextQuestion}></AnswersComponent>\n        </>}\n\n\n        {this.state.questionIndex >= this.props.numQuestions && <>\n\n        <GameOverComponent score={this.state.currentScore} callback={this.props.callback}></GameOverComponent>\n\n        </>}\n\n        </Grid>\n\n      </div>)\n  }\n\n}\nexport default QuestionsComponent\n","const styles = ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: '#07142B',\n    width: 1062,\n    height: 484,\n    fontFamily: 'Kontakt'\n  },\n  questionsRoot: {\n    flexGrow: 1,\n    backgroundColor: '#07142B',\n    width: 1062,\n    height: 484,\n    fontFamily: 'Kontakt',\n    zIndex: 1,\n  },\n  row: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    flexDirection: 'row',\n    marginTop: 20,\n    marginBottom: 20\n  },\n  title: {\n    color: 'white',\n    fontSize: 48,\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  feedbackWrapper: {\n    zIndex: 10,\n  },\n  questionText: {\n    color: 'white'\n  },\n  feedbackHeaderText: {\n    color: 'white',\n    fontSize: 48\n  },\n  feedbackBodyText: {\n    color: 'white'\n  },\n  unselectedButton: {\n    backgroundColor: '#205B82',\n    color: 'white',\n    borderRadius: 20,\n    width: 332,\n    height: 78,\n    fontFamily: 'Kontakt'\n  },\n  container: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  columnGrid: {\n    display: 'grid',\n    direction: 'column'\n  },\n  rowGrid: {\n    display: 'grid',\n    direction: 'row'\n  },\n})\n\nexport { styles }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAdA;AAeA;AACA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;;;;;;AACA;AACA;AAEA;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AACA;;;;;;;AAGA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAtFA;AACA;AAwFA;;;;;;;;;;;;ACzGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA7DA;;;;;A","sourceRoot":""}