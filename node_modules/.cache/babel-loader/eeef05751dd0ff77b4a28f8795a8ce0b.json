{"ast":null,"code":"var _jsxFileName = \"/Users/paulinaanzaldo/Daimler/src/components/Answers.js\";\nimport { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities(); // component that displays the answers\n\nclass AnswersComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onPressAnswer = this.onPressAnswer.bind(this);\n  } // executed when answer is pressed\n\n\n  onPressAnswer(answerObj) {\n    let correctAnswer;\n\n    for (let i in this.props.answers) {\n      let currAnswerObj = this.props.answers[i];\n      console.log(\"current answer is: \");\n      console.log(currAnswerObj);\n\n      if (currAnswerObj.correct) {\n        correctAnswer = entities.decode(currAnswerObj.text); // decoding because some of the questions and answers have HTML entities e.g. &quot;\n\n        break;\n      }\n    }\n\n    this.props.callback(answerObj.correct, correctAnswer);\n  }\n\n  render() {\n    //did the null check because it may take time for the API to return the values\n    if (!this.props.answers) return null;\n    const answer1 = this.props.answers[0];\n    const answer2 = this.props.answers[1]; // initialize these and set  when we have 4 choice multiple choice questions rather than true/false questions\n\n    let answer3 = null;\n    let answer4 = null;\n\n    if (this.props.answers.length === 4) {\n      answer3 = this.props.answers[2];\n      answer4 = this.props.answers[3];\n    }\n\n    return /*#__PURE__*/React.createElement(Grid, {\n      columnGrid: true,\n      direction: \"column\",\n      justify: \"center\",\n      alignItems: \"center\",\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      rowGrid: true,\n      spacing: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      style: styles.unselectedButton,\n      onClick: () => this.onPressAnswer(answer1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, entities.decode(answer1.text), \" \"), /*#__PURE__*/React.createElement(Button, {\n      style: styles.unselectedButton,\n      onClick: () => this.onPressAnswer(answer2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, entities.decode(answer2.text))), /*#__PURE__*/React.createElement(Grid, {\n      rowGrid: true,\n      spacing: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, this.props.answers.length === 4 && /*#__PURE__*/React.createElement(Button, {\n      style: styles.unselectedButton,\n      onClick: () => this.onPressAnswer(answer3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 50\n      }\n    }, entities.decode(answer3.text), \" \"), this.props.answers.length === 4 && /*#__PURE__*/React.createElement(Button, {\n      style: styles.unselectedButton,\n      onClick: () => this.onPressAnswer(answer4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 50\n      }\n    }, entities.decode(answer4.text))));\n  }\n\n}\n\nexport default AnswersComponent;","map":{"version":3,"sources":["/Users/paulinaanzaldo/Daimler/src/components/Answers.js"],"names":["styles","React","Component","Button","Grid","Entities","require","AllHtmlEntities","entities","AnswersComponent","constructor","props","onPressAnswer","bind","answerObj","correctAnswer","i","answers","currAnswerObj","console","log","correct","decode","text","callback","render","answer1","answer2","answer3","answer4","length","unselectedButton"],"mappings":"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","sourcesContent":["import { styles } from \"../stylesheet\";\nimport React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nconst Entities = require(\"html-entities\").AllHtmlEntities;\n\nconst entities = new Entities();\n\n// component that displays the answers\nclass AnswersComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.onPressAnswer = this.onPressAnswer.bind(this);\n  }\n\n  // executed when answer is pressed\n  onPressAnswer(answerObj) {\n    let correctAnswer;\n    for (let i in this.props.answers) {\n      let currAnswerObj = this.props.answers[i];\n      console.log(\"current answer is: \");\n      console.log(currAnswerObj)\n      \n      if (currAnswerObj.correct) {\n        correctAnswer = entities.decode(currAnswerObj.text); // decoding because some of the questions and answers have HTML entities e.g. &quot;\n        break;\n      }\n    }\n\n    this.props.callback(answerObj.correct, correctAnswer);\n  }\n\n  render() {\n    //did the null check because it may take time for the API to return the values\n    if( !this.props.answers ) return null\n    \n    const answer1 = this.props.answers[0];\n    const answer2 = this.props.answers[1];\n    \n    // initialize these and set  when we have 4 choice multiple choice questions rather than true/false questions\n    let answer3 = null; \n    let answer4 = null;\n    if (this.props.answers.length ===  4){\n      answer3 = this.props.answers[2];\n      answer4 = this.props.answers[3];\n    }\n\n    return (\n      <Grid\n        columnGrid\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={2}\n      >\n        <Grid rowGrid spacing={1}>\n          <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer1)}\n          >\n            {entities.decode(answer1.text)}{\" \"}\n          </Button>\n          <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer2)}\n          >\n            {entities.decode(answer2.text)}\n          </Button>\n        </Grid>\n\n        <Grid rowGrid spacing={1}>\n          { (this.props.answers.length === 4) && <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer3)}\n          >\n            {entities.decode(answer3.text)}{\" \"}\n          </Button>}\n          { (this.props.answers.length === 4) && <Button\n            style={styles.unselectedButton}\n            onClick={() => this.onPressAnswer(answer4)}\n          >\n            {entities.decode(answer4.text)}\n          </Button> }\n        </Grid>\n      </Grid>\n    );\n  }\n}\nexport default AnswersComponent;\n"]},"metadata":{},"sourceType":"module"}